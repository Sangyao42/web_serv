;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;          common       ;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; ABNF from RFC5234 (https://datatracker.ietf.org/doc/html/rfc5234#autoid-24)

ALPHA  =  %x41-5A / %x61-7A   ; A-Z / a-z
BIT    =  "0" / "1"
CHAR   =  %x01-7F
    ; any 7-bit US-ASCII character,
    ;  excluding NUL
CR     =  %x0D
    ; carriage return
CRLF   =  CR LF
    ; Internet standard newline
CTL    =  %x00-1F / %x7F
    ; controls
DIGIT  =  %x30-39
    ; 0-9
DQUOTE =  %x22
    ; " (Double Quote)
HEXDIG =  DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
HTAB   =  %x09
    ; horizontal tab
LF     =  %x0A
    ; linefeed
LWSP   =  *(WSP / CRLF WSP)
    ; Use of this linear-white-space rule
    ;  permits lines containing only white
    ;  space that are no longer legal in
    ;  mail headers and have caused
    ;  interoperability problems in other
    ;  contexts.
    ; Do not use when defining mail
    ;  headers and use with caution in
    ;  other contexts.
OCTET  =  %x00-FF
    ; 8 bits of data
SP     =  %x20
VCHAR  =  %x21-7E
    ; visible (printing) characters
WSP    =  SP / HTAB
    ; white space

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;   whitespaces   ;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

OWS                 = *( SP / HTAB ) ; "optional" whitespace
RWS                 = 1*( SP / HTAB ) ; "required" whitespace
BWS                 = OWS ; "bad" whitespace

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;          URI          ;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; ABNF from RFC 3986 (https://datatracker.ietf.org/doc/html/rfc3986)

URI           = scheme ":" hier-part [ "?" query ] [ "#" fragment ]

hier-part     = "//" authority path-abempty
                / path-absolute
                / path-rootless
                / path-empty

URI-reference = URI / relative-ref

absolute-URI  = scheme ":" hier-part [ "?" query ]

relative-ref  = relative-part [ "?" query ] [ "#" fragment ]

relative-part = "//" authority path-abempty
                / path-absolute
                / path-noscheme
                / path-empty

scheme        = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )

authority     = [ userinfo "@" ] host [ ":" port ]
userinfo      = *( unreserved / pct-encoded / sub-delims / ":" )
host          = IP-literal / IPv4address / reg-name
port          = *DIGIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;          Path         ;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

path          = path-abempty    ; begins with "/" or is empty
                / path-absolute   ; begins with "/" but not "//"
                / path-noscheme   ; begins with a non-colon segment
                / path-rootless   ; begins with a segment
                / path-empty      ; zero characters

path-abempty  = *( "/" segment )
path-absolute = "/" [ segment-nz *( "/" segment ) ]
path-noscheme = segment-nz-nc *( "/" segment )
path-rootless = segment-nz *( "/" segment )
path-empty    = 0<pchar>

segment       = *pchar
segment-nz    = 1*pchar
segment-nz-nc = 1*( unreserved / pct-encoded / sub-delims / "@" )
                ; non-zero-length segment without any colon ":"

pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"

query         = *( pchar / "/" / "?" )

fragment      = *( pchar / "/" / "?" )

pct-encoded   = "%" HEXDIG HEXDIG

unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
reserved      = gen-delims / sub-delims
gen-delims    = ":" / "/" / "?" / "#" / "[" / "]" / "@"
sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
                / "*" / "+" / "," / ";" / "="

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;      IP address       ;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

IP-literal    = "[" ( IPv6address / IPvFuture  ) "]"

IPvFuture     = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )

IPv6address   =                            6( h16 ":" ) ls32
                /                       "::" 5( h16 ":" ) ls32
                / [               h16 ] "::" 4( h16 ":" ) ls32
                / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
                / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
                / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
                / [ *4( h16 ":" ) h16 ] "::"              ls32
                / [ *5( h16 ":" ) h16 ] "::"              h16
                / [ *6( h16 ":" ) h16 ] "::"

h16           = 1*4HEXDIG
ls32          = ( h16 ":" h16 ) / IPv4address
IPv4address   = dec-octet "." dec-octet "." dec-octet "." dec-octet
dec-octet     = DIGIT                 ; 0-9
                / %x31-39 DIGIT         ; 10-99
                / "1" 2DIGIT            ; 100-199
                / "2" %x30-34 DIGIT     ; 200-249
                / "25" %x30-35          ; 250-255

reg-name      = *( unreserved / pct-encoded / sub-delims )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;      HTTP Message     ;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; ABNF from RFC 9112 (https://datatracker.ietf.org/doc/html/rfc9112)

HTTP-message   = start-line CRLF
                *( field-line CRLF )
                CRLF
                [ message-body ]

start-line     = request-line / status-line

HTTP-version   = HTTP-name "/" DIGIT "." DIGIT
HTTP-name      = %s"HTTP"

request-line   = method SP request-target SP HTTP-version

request-target = origin-form
                / absolute-form
                / authority-form
                / asterisk-form

origin-form    = absolute-path [ "?" query ] ;e.g. /where?q=now
absolute-form  = absolute-URI ;e.g. http://www.example.org/pub/WWW/TheProject.html
authority-form = uri-host ":" port ;e.g. www.example.org:80
asterisk-form  = "*"

status-line    = HTTP-version SP status-code SP [ reason-phrase ]
status-code    = 3DIGIT
reason-phrase  = 1*( HTAB / SP / VCHAR / obs-text )

field-line    = field-name ":" OWS field-value OWS
; A server MUST reject, with a response status code of 400 (Bad Request), any received request message that contains whitespace between a header field name and colon

message-body  = *OCTET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;   HTTP body fields   ;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Check RFC9110 8

Content-Type        = media-type
media-type          = type "/" subtype parameters
type                = token
subtype             = token

; Content-Language    = [ language-tag *( OWS "," OWS language-tag ) ]
; language-tag        = <Language-Tag, see [RFC5646], Section 2.1>

Content-Length      = 1*DIGIT
Content-Location    = absolute-URI / partial-URI

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;   HTTP general fields   ;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Check RFC 9110 7.6
Connection          = [ connection-option *( OWS "," OWS connection-option ) ]
connection-option   = token ; only for close. Keep Alive is by default in HTTP1.1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;   HTTP request fields   ;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Check RFC9110 7.2
Host                = uri-host [ ":" port ]

; Check RFC9110 10.1 (Request Context fields)

Referer             = absolute-URI / partial-URI

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;   HTTP response fields   ;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

User-Agent          = product *( RWS ( product / comment ) )
product             = token [ "/" product-version ]
product-version     = token

; Check RFC9110 8.8 (Validator fields)

Last-Modified       = HTTP-date

; Check RFC9110 10.2 (Response Context fields)

Allow               = [ method *( OWS "," OWS method ) ]

Location            = URI-reference

Retry-After         = HTTP-date / delay-seconds
delay-seconds       = 1*DIGIT

Server              = product *( RWS ( product / comment ) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;   Chunk (needed in Transfer-encoding: chunked)   ;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

chunked-body   = *chunk
			   last-chunk
			   trailer-section
			   CRLF

chunk          = chunk-size [ chunk-ext ] CRLF
			   chunk-data CRLF
chunk-size     = 1*HEXDIG
last-chunk     = 1*("0") [ chunk-ext ] CRLF

chunk-data     = 1*OCTET ; a sequence of chunk-size octets

chunk-ext      = *( BWS ";" BWS chunk-ext-name
				  [ BWS "=" BWS chunk-ext-val ] )

chunk-ext-name = token
chunk-ext-val  = token / quoted-string

trailer-section   = *( field-line CRLF )
